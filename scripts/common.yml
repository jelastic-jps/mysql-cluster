globals:
  db_cluster_path: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0
  customConfigFile: /etc/mysql/conf.d/my_custom.cnf
  
actions:
  
  isEnvRunning:
    script: |
      import com.hivext.api.server.system.service.utils.EnvironmentStatus;
      var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
      if (resp.result != 0) return resp;
      var status = resp.env.status;
      var isEnvRunning = status == EnvironmentStatus['ENV_STATUS_TYPE_RUNNING'].getValue() ? true : false;
      return {result: 0, isEnvRunning: isEnvRunning}

  getReplicaUser:
    - env.control.GetContainerEnvVarsByGroup[sqldb]
    - setGlobals:
        REPLICA_USER: ${response.object.REPLICA_USER}
        REPLICA_PSWD: ${response.object.REPLICA_PSWD}
    - if (/response/.test("${globals.REPLICA_USER}") && /response/.test("${globals.REPLICA_PSWD}")):
        - setReplicaUser
        - setGlobals:
            DB_USER: ${settings.user}
            DB_PASS:  ${settings.password}
        - setupUser:
            user: ${globals.REPLICA_USER}
            pswd: ${globals.REPLICA_PSWD}
            id: sqldb
  
  setReplicaUser:
    - setGlobals:
        REPLICA_USER: repl-${fn.random}
        REPLICA_PSWD: ${fn.password(20)}
    - env.control.AddContainerEnvVars[sqldb]:
        vars:
          REPLICA_USER: ${globals.REPLICA_USER}
          REPLICA_PSWD: ${globals.REPLICA_PSWD}

  setupUser:
    - if (/mysql/.test("${nodes.sqldb.nodeType}")):
      - if ('${fn.compare([nodes.sqldb.version], 8.0)}' == -1):
          cmd[${this.id}]: |-
            mysqladmin ping -u${globals.DB_USER} -p${globals.DB_PASS} 2>/dev/null 1>/dev/null; MYSQLD_RUNNING=${?};
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "CREATE USER IF NOT EXISTS '${this.user}'@'%' IDENTIFIED BY '${this.pswd}';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "GRANT USAGE, SUPER, SELECT, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '${this.user}'@'%';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "FLUSH PRIVILEGES;"; fi;
      - else:
          cmd[${this.id}]: |-
            mysqladmin ping -u${globals.DB_USER} -p${globals.DB_PASS} 2>/dev/null 1>/dev/null; MYSQLD_RUNNING=${?};
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "CREATE USER IF NOT EXISTS '${this.user}'@'%' IDENTIFIED BY '${this.pswd}';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "GRANT USAGE, SELECT, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION_SLAVE_ADMIN, REPLICATION CLIENT ON *.* TO '${this.user}'@'%';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "FLUSH PRIVILEGES;"; fi;

    - if (/mariadb/.test("${nodes.sqldb.nodeType}")):
      - if ('${fn.compare([nodes.sqldb.version], 10.5)}' == -1):
          cmd[${this.id}]: |-
            mysqladmin ping -u${globals.DB_USER} -p${globals.DB_PASS} 2>/dev/null 1>/dev/null; MYSQLD_RUNNING=${?};
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "CREATE USER IF NOT EXISTS '${this.user}'@'%' IDENTIFIED BY '${this.pswd}';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "GRANT USAGE, SUPER, SELECT, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '${this.user}'@'%';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "FLUSH PRIVILEGES;"; fi;
      - else:
          cmd[${this.id}]: |-
            mysqladmin ping -u${globals.DB_USER} -p${globals.DB_PASS} 2>/dev/null 1>/dev/null; MYSQLD_RUNNING=${?};
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "CREATE USER IF NOT EXISTS '${this.user}'@'%' IDENTIFIED BY '${this.pswd}';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "GRANT USAGE, SELECT, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION SLAVE ADMIN, SLAVE MONITOR, BINLOG MONITOR ON *.* TO '${this.user}'@'%';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "FLUSH PRIVILEGES;"; fi;

    - if (/percona/.test("${nodes.sqldb.nodeType}")):
          cmd[${this.id}]: |-
            mysqladmin ping -u${globals.DB_USER} -p${globals.DB_PASS} 2>/dev/null 1>/dev/null; MYSQLD_RUNNING=${?};
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "CREATE USER IF NOT EXISTS '${this.user}'@'%' IDENTIFIED BY '${this.pswd}';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "GRANT USAGE, SUPER, SELECT, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '${this.user}'@'%';"; fi;
            if [[ ${MYSQLD_RUNNING} -eq 0 ]] ; then MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -e "FLUSH PRIVILEGES;"; fi;

  setupAdminUser:
    - cmd[${this.id}]: |-
        wget ${baseUrl}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log;
        bash ~/setupUser.sh ${globals.DB_USER} ${globals.DB_PASS} &>> /var/log/run.log;
      user: root

  setupUsers:
    - setupAdminUser: 
        id: ${this.id}
    - setupUser: 
        id: ${this.id}
        user: ${globals.REPLICA_USER}
        pswd: ${globals.REPLICA_PSWD}

  addCustomConfig:
    - cmd[sqldb]: wget ${baseUrl}/configs/custom.cnf -O ${globals.customConfigFile} &>> /var/log/run.log;
    - env.file.AddFavorite:
      nodeGroup: sqldb
      path: ${globals.customConfigFile}
      keyword: my_custom.cnf
      isDir: false
      
  syncCustomConfig:
    - nodeIdFrom: ${this.nodeIdFrom}
      nodeIdTo: ${this.nodeIdTo}
      script: |
        var resp = api.env.file.Read({
              envName: '${env.envName}',
              path: '${globals.customConfigFile}',
              nodeId: nodeIdFrom
            });
        if (resp.result == 2002) return {result: 0};
        if (resp.result != 0) return resp
        var resp = api.env.file.Write({
              envName: '${env.envName}',
              path: '${globals.customConfigFile}',
              nodeId: nodeIdTo,
              body: resp.body
            });
        if (resp.result != 0) return resp;
        return {result: 0};

  applyVersionConfiguration:
    - if (/mysql/.test("${nodes.sqldb.nodeType}") && '${fn.compare([nodes.sqldb.version], 8.0.25)}' == 1):
        cmd[${this.id}]: |-
          sed -i "s/log-slave-updates/log_replica_updates/" ${this.conf_file};
          sed -i "s/slave-skip-errors/replica_skip_errors/" ${this.conf_file};
          sed -i "s/expire_logs_days.*/binlog_expire_logs_seconds = 604800/" ${this.conf_file};
          sed -i "/master_info_repository/d" ${this.conf_file};
          sed -i "/relay_log_info_repository/d" ${this.conf_file};

    - if (/mysql/.test("${nodes.sqldb.nodeType}") && '${fn.compare([nodes.sqldb.version], 8.0.33)}' == 1):
        cmd[${this.id}]: |-
          sed -i "/binlog_format/d" ${this.conf_file};

    - if (/percona/.test("${nodes.sqldb.nodeType}") && '${fn.compare([nodes.sqldb.version], 8.0.33)}' == 1):
        cmd[${this.id}]: |-
          sed -i "s/log-slave-updates/log_replica_updates/" ${this.conf_file};
          sed -i "s/slave-skip-errors/replica_skip_errors/" ${this.conf_file};
          sed -i "s/expire_logs_days.*/binlog_expire_logs_seconds = 604800/" ${this.conf_file};
          sed -i "/binlog_format/d" ${this.conf_file};
