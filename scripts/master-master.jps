type: update
id: mysql-master-master-replication-cluster
name: MySQL/MariaDB Primary-Primary Replication Database Cluster
description: 'DB Auto Clustering: 1 x Primary + N x Secondary'

baseUrl: https://raw.githubusercontent.com/sych74/mysql-cluster/JE-63374

success:
   text: /texts/phpmyadmin-credentials.md

targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: sqldb

mixins:
  - /scripts/common.yml

globals:
  PATH: ${settings.path}
  DB_USER: ${settings.db_user}
  DB_PASS: ${settings.db_pass}
  SCHEME: ${settings.scheme}

onAfterScaleOut[sqldb]:
  - forEach(event.response.nodes):
    - setupSlave: ${@i.id}
    - addSlave: ${@i.id}

onAfterMigrate:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    settings:
      path: ${globals.PATH}
      nodeGroup: ${settings.nodeGroup}
      clone: true

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      path: ${globals.PATH}
      nodeGroup: ${settings.nodeGroup}
      clone: true

onInstall:
  - getReplicaUser
  - getMasterNodes
  - setupMasters
  - setupPrimaryPrimaryReplication

actions:

  getMasterNodes:
    - if ('${nodes.sqldb.master.id}' == '${nodes.sqldb.first.id}'):
        setGlobals:
          primary1_id: ${nodes.sqldb.master.id}
          primary1_ip: ${nodes.sqldb.master.address}
          primary2_id: ${nodes.sqldb[1].id}
          primary2_ip: ${nodes.sqldb[1].address}
    - else:
        setGlobals:
          primary1_id: ${nodes.sqldb.master.id}
          primary1_ip: ${nodes.sqldb.master.address}
          primary2_id: ${nodes.sqldb.first.id}
          primary2_ip: ${nodes.sqldb.first.address}

  setupMasters:
    - setupMaster:
        id: ${globals.primary1_id}
        increment: 1
    - setupMaster:
        id: ${globals.primary2_id}
        increment: 2
    
  setupMaster:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/master.cnf;
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this.increment}/" /etc/mysql/conf.d/master.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/master.cnf;
    - setupUsers:
        id: ${this.id}
    - setNodeDisplayName[${this.id}]: Primary

  setupSlave:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/slave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log;
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/slave.cnf;
    - setupUsers:
        id: ${this.id}
    - setNodeDisplayName[${this.id}]: Secondary
    
  setupPrimaryPrimaryReplication:
    cmd[${globals.primary2_id}]: |-
      curl --silent https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/addons/recovery/scripts/db-recovery.sh > /tmp/db-recovery.sh;
      bash /tmp/db-recovery.sh  --scenario restore_primary_from_primary --donor-ip ${globals.primary1_id}
  
  addSlaves:
    - forEach(n:nodes.sqldb):
        addNewSlave: ${@n.id}
  
  addNewSlave:
    - if (('${this}' != '${globals.master1_id}') && ('${this}' != '${globals.master2_id}')):
        - setupSlave:
            id: ${this}
        - setupReplication:
            id: ${this}
            masterId: "${globals.master_id_for_new_slave}"

      
