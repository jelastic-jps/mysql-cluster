type: update
id: mysql-master-master-replication-cluster
name: MySQL/MariaDB Primary-Primary Replication Database Cluster
description: 'DB Auto Clustering: 1 x Primary + N x Secondary'

baseUrl: https://raw.githubusercontent.com/sych74/mysql-cluster/JE-63374

success:
   text: /texts/phpmyadmin-credentials.md

targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: sqldb

mixins:
  - /scripts/common.yml

globals:
  PATH: ${settings.path}
  DB_USER: ${settings.db_user}
  DB_PASS: ${settings.db_pass}
  SCHEME: ${settings.scheme}

onAfterScaleOut[sqldb]:
  - forEach(event.response.nodes):
    - setupSlave: ${@i.id}
    - addSlave: ${@i.id}

onAfterMigrate:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    settings:
      path: ${globals.PATH}
      nodeGroup: ${settings.nodeGroup}
      clone: true

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      path: ${globals.PATH}
      nodeGroup: ${settings.nodeGroup}
      clone: true

onInstall:
  - getReplicaUser
  - getMasterNodes
  - setupMasters
  
  
  - if (${settings.clone:false}):
    - importGlobalsFromNodeGroup: sqldb
    - getMastersIDs
    - if (('${globals.master2_id}' != '${nodes.sqldb[0].id}') && ('${globals.master2_id}' != '${nodes.sqldb[1].id}')):
      - assignNewMaster
    - reconfigureMasters
    - reconfigureSlaves
    - exportsGlobalsToNodeGroup
  - else:
    - setMastersIDs
    - setupMasters
    - addSlaves
    - exportsGlobalsToNodeGroup
    - setScalingMode

actions:

  assignNewMaster:
    - setupSlave:
        id: ${globals.master2_id}
    - setMastersIDs
    - setupMaster:
        id: "${globals.master2_id}"
        increment: 2
  
  getMasterNodes:
    - if ('${nodes.sqldb.master.id}' == '${nodes.sqldb.first.id}'):
        setGlobals:
          primary1_id: ${nodes.sqldb[0].id}
          primary1_ip: ${nodes.sqldb[0].address}
          primary2_id: ${nodes.sqldb[1].id}
          primary2_ip: ${nodes.sqldb[1].address}
    - else:
        setGlobals:
          primary1_id: ${nodes.sqldb.master.id}
          primary1_ip: ${nodes.sqldb.master.address}
          primary2_id: ${nodes.sqldb[1].id}
          primary2_ip: ${nodes.sqldb[1].address}

  setupMasters:
    - setupMaster:
        id: ${globals.primary1_id}
        increment: 1
    - setupMaster:
        id: ${globals.primary2_id}
        increment: 2
    
  setupMaster:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/master.cnf
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this.increment}/" /etc/mysql/conf.d/master.cnf
    - setupUsers:
        id: ${this.id}
    - setNodeDisplayName[${this.id}]: Primary

  setupSlave:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/slave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log;
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/slave.cnf;
    - setupUsers:
        id: ${this.id}
    - setNodeDisplayName[${this.id}]: Secondary
  
  addSlaves:
    - forEach(n:nodes.sqldb):
        addNewSlave: ${@n.id}
  
  addNewSlave:
    - if (('${this}' != '${globals.master1_id}') && ('${this}' != '${globals.master2_id}')):
        - setupSlave:
            id: ${this}
        - setupReplication:
            id: ${this}
            masterId: "${globals.master_id_for_new_slave}"
        - setMasterForNewSlave

  reconfigureReplication:
    cmd[${this.id}]: |-
      rm -f /var/lib/mysql/auto.cnf;
      sed -i "s/report_host.*/report_host = node${this.id}/" ${this.config};
      sed -i "s/server-id.*/server-id = ${this.id}/" ${this.config};
      mysqlreplicate --master=${globals.DB_USER}:${globals.DB_PASS}@node${this.master_id}:3306 --slave=${globals.DB_USER}:${globals.DB_PASS}@node${this.id}:3306 --rpl-user=${globals.REPLICA_USER}:${globals.REPLICA_PSWD}
      sudo /etc/init.d/mysql restart;

  reconfigureMasters:
    - reconfigureReplication:
        id: "${globals.master1_id}"
        master_id: "${globals.master2_id}"
        config: "/etc/mysql/conf.d/master.cnf"
    - reconfigureReplication:
        id: "${globals.master2_id}"
        master_id: "${globals.master1_id}"
        config: "/etc/mysql/conf.d/master.cnf"

  reconfigureSlaves:
    - forEach(n:nodes.sqldb):
        reconfigureSlave: ${@n.id}
    
  reconfigureSlave:  
    - if (('${this}' != '${globals.master1_id}') && ('${this}' != '${globals.master2_id}')):
      - reconfigureReplication:
          id: ${this}
          master_id: "${globals.master_id_for_new_slave}"
          config: "/etc/mysql/conf.d/slave.cnf"
      - setMasterForNewSlave
  
  addCustomConfig:
    if (!/settings.custom_conf/.test("${globals.CUSTOM_CONF}")):
      cmd[${this.id}]: cd /etc/mysql/conf.d && wget ${globals.CUSTOM_CONF} &>> /var/log/run.log
      
  cloneSlave:
    - if (nodes.proxy):
        cmd[proxy]: |-
          MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "update mysql_servers set status='OFFLINE_HARD' where hostname='node${globals.node_id_for_new_slave}';"
          MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME;"
    - cmd[${globals.node_id_for_new_slave}]: sudo /etc/init.d/mysql stop
    - api: environment.control.AddNode
      nodeGroup: sqldb
      nodeid: ${globals.node_id_for_new_slave}
      nodeType: ${nodes.sqldb.nodeType}
      flexibleCloudlets: ${nodes.sqldb.flexibleCloudlets}
      fixedCloudlets: ${nodes.sqldb.fixedCloudlets}
    - set:
        new_slave_id: ${response.node.id}
    - setNodeDisplayName[${nodes.sqldb.master.id}]: ${nodes.sqldb.master.displayName}
    - setupSlave:
        id: "${this.new_slave_id}"
    - reconfigureReplication:
        id: "${this.new_slave_id}"
        master_id: "${globals.master_id_for_new_slave}"
        config: "/etc/mysql/conf.d/slave.cnf"
    - cmd[${globals.node_id_for_new_slave}]: sudo /etc/init.d/mysql start
    - if (nodes.proxy):
        cmd[proxy]: |-
          MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "update mysql_servers set status='ONLINE' where hostname='node${globals.node_id_for_new_slave}';"
          MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME;"
    - setMasterForNewSlave
    
  setScalingMode:
    - api: jelastic.env.control.ApplyNodeGroupData
      nodeGroup: sqldb
      data:
        scalingMode: STATEFUL

  importGlobalsFromNodeGroup:
    - script: |
        var resp = api.env.control.GetNodeGroups("${env.name}", session);
        if (resp.result != 0) return resp;
        var groups = resp.object, globals;
        for (var i = 0, n = groups.length; i < n; i++)
          if (groups[i].name == "${this}" && groups[i].globals) {
            globals = new org.yaml.snakeyaml.Yaml().load(groups[i].globals);
            break;
          }
        return { result: 0, onAfterReturn: { setGlobals: globals } };

  exportsGlobalsToNodeGroup:
    - env.control.ApplyNodeGroupData [sqldb]:
        data: 
          globals: "${globals.toJSON()}" 
  
