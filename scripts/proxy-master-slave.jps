jpsType: update
id: mysql-proxy-master-slave-cluster
name: MySQL/MariaDB/Percona Database Cluster with ProxySQL
description: ProxySQL Load Balancer Entry Point

baseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0

success: /texts/proxy-entrypoint.md

targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: sqldb

mixins:
  - /scripts/common.yml
  - /scripts/proxy-common.yml

globals:
  DB_USER: ${settings.db_user}
  DB_PASS: ${settings.db_pass}
  SCHEME: ${settings.scheme}
  ORCH_PASS: ${fn.password(10)}
  ADMIN_USER: admin-${fn.random}
  ADMIN_PASS: ${fn.password(10)}
  MAX_REPL_LAG: 20
  
onBeforeRemoveNode[proxy]:
  stopEvent:
    type: warning
    message: Scaling is not supported for ProxySQL.

onBeforeAddNode[proxy]:
  stopEvent:
    type: warning
    message: Scaling is not supported for ProxySQL.

onAfterScaleOut[sqldb]:
  forEach(event.response.nodes):
  - addSlave:
      id: ${@i.id}

onBeforeScaleIn[sqldb]:
  forEach(event.response.nodes):
    removeSlave:
      id: ${@i.id}
      
onAfterScaleIn[sqldb]:
  forEach(event.response.nodes):
    cmd[proxy]: MYSQL_PWD=${globals.ORCH_PASS} mysql -h 127.0.0.1 -P3360 -uadmin -e "DELETE FROM orchestrator.database_instance where hostname='node${@i.id}-${env.domain}';"

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      nodeGroup: ${settings.nodeGroup}
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"

onAfterMigrate:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    settings:
      nodeGroup: ${settings.nodeGroup}
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"

onInstall:
  - getReplicaUser
  - resetProxyNodes
  - setupOrchestrator
  - setupProxySQLCluster
  - setupProxySQL
  - if ('${globals.SCHEME}'.toLowerCase() == 'master'):
    - setGlobals:
        MAX_REPL_LAG: 0
    - getMastersIDs
    - addMaster:
        id: "${globals.master1_id}"
    - addMaster:
        id: "${globals.master2_id}"
    - forEach(k:nodes.sqldb):
        addSlave:
          id: "${@k.id}"

  - if ('${globals.SCHEME}'.toLowerCase() != 'master'):
      forEach(l:nodes.sqldb):
        - if (${@l.ismaster}):
            addMaster:
              id: "${@l.id}"
        - addSlave:
            id: "${@l.id}"

actions:

  setupProxySQL:
    - log: ProxySQL configuration
    - cmd [proxy]: |-
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_replication_hostgroups VALUES (10,11,'read_only','Group setup');"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_users (username, password, active, default_hostgroup, max_connections) 
          VALUES ('${globals.DB_USER}', '${globals.DB_PASS}', 1, 10, 1000);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, apply) VALUES (1, '^SELECT.*', 11, 1);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, apply) VALUES (1, '^SELECT.*FOR UPDATE', 10, 1);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='${globals.REPLICA_USER}' WHERE variable_name='mysql-monitor_username';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='${globals.REPLICA_PSWD}' WHERE variable_name='mysql-monitor_password';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='${nodes.sqldb.version}' WHERE variable_name='mysql-server_version';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL VARIABLES TO RUNTIME; SAVE MYSQL VARIABLES TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL USERS TO RUNTIME; SAVE MYSQL USERS TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL QUERY RULES TO RUNTIME; SAVE MYSQL QUERY RULES TO DISK;"

  addMaster:
    cmd [proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_servers (hostgroup_id, hostname, port) VALUES (10, 'node${this.id}', 3306);"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
      MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -hnode${this.id} -e "show slave hosts;"
      /usr/local/orchestrator/orchestrator -c discover -i node${this.id} cli;
    user: root
  
  addSlave:
    cmd[proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "INSERT INTO mysql_servers (hostgroup_id, hostname, port, max_replication_lag) 
        VALUES (11, 'node${this.id}', 3306, '${globals.MAX_REPL_LAG}');"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;"

  removeSlave:
    cmd[proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "DELETE FROM mysql_servers WHERE hostname = 'node${this.id}';"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
      MYSQL_PWD=${globals.ORCH_PASS} mysql -h 127.0.0.1 -P3360 -uadmin  -e "DELETE FROM orchestrator.database_instance where hostname='node${this.id}-${env.domain}';"
      
  getMastersIDs:
    - script: |
        var envInfo, resp, groups,
            onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals;
        resp = jelastic.env.control.ExecCmdByGroup('${env.envName}', session, "sqldb", toJSON([{ "command": '[ -f "/etc/mysql/conf.d/master.cnf" ] && echo "YES" || echo "NO";' }]), false, false, "root");
        if (resp.result != 0) return resp;
        groups = resp.responses;
        for (var i = 0, n = groups.length; i < n; i++) {
          if (groups[i].out == "YES") {
            envInfo = jelastic.env.control.GetEnvInfo('${env.envName}', session);
            for (var node = 0, nodes = envInfo.nodes; node < nodes.length; node++) {
              if (nodes[node].id == groups[i].nodeid)
                nodes[node].ismaster ? glbs["master1_id"] = groups[i].nodeid : glbs["master2_id"] = groups[i].nodeid;
            }
          }
        }
        return { result: 0, onAfterReturn: onAfterReturn };
