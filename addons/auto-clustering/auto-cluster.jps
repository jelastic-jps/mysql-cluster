jpsType: update
id: mysql-auto-cluster
name: Scalable Database cluster

description:
  text: Ready-to-work scalable MySQL Cluster with primary-secondary asynchronous replication
    and ProxySQL load balancer in front of it. Is supplied with embedded Orchestrator
    GUI for convenient cluster management and provides even load distribution, secondaries
    healthcheck and autodiscovery of newly added DB nodes
  short: Scalable MySQL cluster with ProxySQL for even load distribution

baseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0

logo: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/images/mysql-logo.png

globals:
  logic_jps: ${baseUrl}/addons/auto-clustering/scripts/auto-cluster-logic.jps?_r=${fn.random}

nodeGroupAlias:
  ${targetNodes.nodeGroup}: sqldb

onInstall:
  script: |
    var scheme = "${settings.scheme:}",
        db_user = "${settings.db_user:}",
        db_pass = "${settings.db_pass:}",
        is_proxysql = "${settings.is_proxysql:}",
        auto_cluster = "${settings.auto_cluster:}";
    var resp = jelastic.env.control.GetContainerEnvVars("${env.envName}", session, ${nodes.sqldb.master.id});
    if (resp.result != 0) return resp;
    if (String(auto_cluster || resp.object.AUTO_CLUSTER).toLowerCase() == "false") return {result:0};
    
    scheme = scheme || resp.object.SCHEME || "slave";
    db_user = db_user || resp.object.DB_USER || "user-${fn.random}";
    db_pass = db_pass || resp.object.DB_PASS || "${fn.password(20)}";
    is_proxysql = is_proxysql || resp.object.IS_PROXYSQL || "false";
    return {result:0, onAfterReturn:{setupReplica:{scheme:scheme, db_user:db_user, db_pass:db_pass, is_proxysql:is_proxysql}}}

actions:
  setupReplica:
    install:
      jps: ${globals.logic_jps}
      envName: ${env.envName}
      nodeGroup: sqldb
      settings:
        path: ${baseUrl}
        scheme: ${this.scheme}
        logic_jps: ${globals.logic_jps}
        db_user: ${this.db_user}
        db_pass: ${this.db_pass}
        repl_user: repl-${fn.random}
        repl_pass: ${fn.password(20)}
        is_proxysql: ${this.is_proxysql}
        
