jpsType: update
id: mysql-auto-cluster-logic
name: Logic for scalable Database cluster
skipNodeEmails: true

description:
  text: Ready-to-work scalable MySQL Cluster with primary-secondary asynchronous replication
    and ProxySQL load balancer in front of it. Is supplied with embedded Orchestrator
    GUI for convenient cluster management and provides even load distribution, secondaries
    healthcheck and autodiscovery of newly added DB nodes
  short: Logic for scalable Database cluster

globals:
  path: "${settings.path}"
  scripts: "${settings.path}/scripts"

nodeGroupAlias:
  "${targetNodes.nodeGroup}": sqldb

onBeforeResetNodePassword[sqldb]:
  - cmd[${events.response.nodeid}]: 
      sed -i "s/^\!includedir/#\!includedir/g" /etc/my.cnf
    user: root

onAfterResetNodePassword[sqldb]:
  - cmd[${events.response.nodeid}]: |-
      sed -i "s/^#\!includedir/\!includedir/g" /etc/my.cnf
      jem service restart
    user: root

onInstall:
  - if ('${settings.db_pass}'.length < 8):
      stopEvent:
        type: warning
        message: Password must be at least 8 characters long.
        
  - env.control.AddContainerEnvVars[sqldb]:
      vars:
        REPLICA_USER: repl-${fn.random}
        REPLICA_PSWD: ${fn.password(20)}
        SCHEME: ${settings.scheme}

  - install:
      jps: https://raw.githubusercontent.com/dimkadt/mysql-cluster/master/addons/recovery/manifest.yml?_r=${fn.random}
      nodeGroup: sqldb
      targetNodes: sqldb
      settings:
        install: true
 
  - install: 
      jps: https://raw.githubusercontent.com/dimkadt/mysql-cluster/master/addons/check-corrupts/manifest.yml?_r=${fn.random}
      nodeGroup: sqldb
      targetNodes: sqldb
      settings:
        install: true
 
  - if (nodes.proxy):
      setupCluster
  - if (!nodes.proxy):
      if (nodes.sqldb.length > 1): setupCluster

actions:
  
  install-jps:
    install:
      jps: "${this.jps}"
      nodeGroup: sqldb
      settings:
        db_user: "${settings.db_user}"
        db_pass: "${settings.db_pass}"
        scheme: "${settings.scheme}"
        path: "${globals.path}"
        nodeGroup: sqldb

  addProxyNodes:
    - addNodes:
        cloudlets: 8
        displayName: ProxySQL
        nodeType: proxysql
        nodeGroup: proxy
        scalingMode: stateless
      nodeGroupData:
        validation :
          minCount: 2
          maxCount: 2

    - addNodes:
        cloudlets: 8
        displayName: ProxySQL
        nodeType: proxysql
        nodeGroup: proxy
        scalingMode: stateless
      nodeGroupData:
        validation :
          minCount: 2
          maxCount: 2
          
    - api: env.control.SetNodeGroupDisplayName
      nodeGroup: proxy
      displayName: DB Load Balancer

    
  setupCluster:
  
    - if (!nodes.proxy && '${settings.is_proxysql}' == 'true'): addProxyNodes
        
    - if (/mysql/.test("${nodes.sqldb.nodeType}")):

        - if ('${settings.scheme}'.toLowerCase() == 'master'):
          - install-jps:
              jps: "${globals.scripts}/master-master.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"
        
        - if ('${settings.scheme}'.toLowerCase() == 'slave'):
          - install-jps:
              jps: "${globals.scripts}/master-slave.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"

    - if (/mariadb/.test("${nodes.sqldb.nodeType}")):
        - if ('${settings.scheme}'.toLowerCase() == 'galera'):  
          - install-jps:
              jps: "${globals.scripts}/galera.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-galera.jps?_r=${fn.random}"
      
        - if ('${settings.scheme}'.toLowerCase() == 'master'):
          - install-jps:
              jps: "${globals.scripts}/master-master.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"
        
        - if ('${settings.scheme}'.toLowerCase() == 'slave'):
          - install-jps:
              jps: "${globals.scripts}/master-slave.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"

    - if (/percona/.test("${nodes.sqldb.nodeType}")):
        - if ('${settings.scheme}'.toLowerCase() == 'xtradb'):  
          - install-jps:
              jps: "${globals.scripts}/xtradb.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-galera.jps?_r=${fn.random}"
      
        - if ('${settings.scheme}'.toLowerCase() == 'master'):
          - install-jps:
              jps: "${globals.scripts}/master-master.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"
        
        - if ('${settings.scheme}'.toLowerCase() == 'slave'):
          - install-jps:
              jps: "${globals.scripts}/master-slave.jps?_r=${fn.random}"
          - if ('${settings.is_proxysql}' == 'true'):    
            - install-jps:
                jps: "${globals.scripts}/proxy-master-slave.jps?_r=${fn.random}"
 
