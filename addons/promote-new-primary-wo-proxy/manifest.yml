type: update
name: Auto Promote New Primary Add-On (Alpha)
id: promote-new-primary

description:
  text:  "Enable automatic failover for your regular MySQL/MariaDB Primary-Secondary database cluster. After installation, the add-on tracks the cluster node's status to automatically replace failed nodes. It also promotes new Primary if the current one becomes unavailable."
  short: Auto-Failover for MySQL/MariaDB Primary-Secondary Topology

logo: images/db-failover-red.png

baseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/JE-66025/addons/promote-new-primary-wo-proxy

mixins:
  - https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0/scripts/common.yml

targetNodes:
  nodeGroup: 
    - sqldb

settings:
  main:
    submitUnchanged: true
    fields:
      - name: primary_idle_time
        caption: Primary Idle Time (sec)
        type: spinner
        min: 30
        max: 3600

buttons:
  - name: Idle Time Failover
    caption: Auto Failover
    confirmText: Enable Auto Failover?
    settings: main
    loadingText: Enabling Auto Failover...
    action: idleTimeConfigure

  - name: Failover
    caption: Failover
    confirmText: Run failover?
    loadingText: Applying failover...
    action: forceFailover

globals:
  scriptName: ${env.name}-promote-master
  jcmPath: /usr/local/sbin/jcm.sh
  random: ${fn.password}

onInstall:
  - addDomainToPrimary:
      domain: primarydb
      nodeId: ${nodes.sqldb.master.id}
  - downloadScripts
  - createScript
  
onUninstall: removeTask

onCustomNodeEvent [name:executeScript]:
  script: |
    let URL = "${platformUrl}${globals.scriptName}?appid=" + appid + "&token=${globals.random}&envName=${env.name}&uid=${user.uid}&force=true&primary_idle_time=${settings.primary_idle_time}&session=" + session;
    let Transport = com.hivext.api.core.utils.Transport;
    resp = new Transport().get(URL);
    resp = JSON.parse(resp);
    if (resp.response && resp.response != 0) {
      return new Transport().get("${platformUrl}/1.0/environment/jerror/rest/jerror?appid=" + appid + "&actionname=promoteprimary&callparameters=" + URL + "&email=${user.email}&errorcode=4121&errormessage=" + encodeURIComponent(resp.response.message) + "&priority=high");
    }
    return { result: 0 }

actions:
  addDomainToPrimary:
    - domain: ${this.domain}
      nodeId: ${this.nodeId}
      script: |
        var resp = jelastic.env.binder.GetDomains('${env.envName}', session);
        if (resp.result != 0) return resp;
        const data = JSON.parse(resp);
        const nodeWithDomain = data.nodes.find(node => node.domains.includes(domain));
        if (nodeWithDomain) {
          resp = jelastic.env.binder.RemoveDomains({
            envName: '${env.envName}',
            domains: domain,
            nodeId: nodeWithDomain.nodeId
            });
          if (resp.result != 0) return resp;
        }
        return jelastic.env.binder.AddDomains({
            envName: '${env.envName}',
            domains: domain,
            nodeId: nodeId
        });

  addConfiguration:
    - cmd[sqldb]: |-
        [ ! -f /etc/mysql/jcm.conf ] && echo "### ProxySQL configuration for JCM" > /etc/mysql/jcm.conf;
        grep -q "PRIMARY_NODE_ID" /etc/mysql/jcm.conf || { echo "PRIMARY_NODE_ID=node${nodes.sqldb.master.id}" >> /etc/mysql/jcm.conf; }
        echo /etc/mysql/jcm.conf >>  /etc/jelastic/redeploy.conf;
        chown jelastic /etc/mysql/jcm.conf;
        chown jelastic -R /etc/mysql;
      user: root

  addSchedulerToProxySQL:
    - cmd[sqldb]: |-
        bash ${globals.jcmPath} addScheduler --interval=${settings.primary_idle_time} --filename=/usr/local/sbin/jcm.sh --arg1=primaryStatus --scheduler_name=primaryStatus;

  forceFailover:
    - cmd[${nodes.sqldb.master.id}]: screen -d -m bash /usr/local/sbin/jcm.sh forceFailover

  downloadScripts:
    - cmd[sqldb]: |-
        curl --silent ${baseUrl}/scripts/jcm.sh > ${globals.jcmPath};
        chmod +x ${globals.jcmPath};
        echo "Start JCM logs" > /var/log/jcm.log;
        chown jelastic /var/log/jcm.log;
      user: root

  idleTimeConfigure:
    cmd[sqldb]: |-
      bash ${globals.jcmPath} setSchedulerTimeout --interval=${settings.primary_idle_time} --scheduler_name=primaryStatus;
  
  removeTask:
    script: |
      let resp = api.utils.scheduler.GetTasks({appid: appid, session: session});
      if (resp.result != 0) return resp;
      
      let tasks = resp.objects;
      for (let i = 0, l = tasks.length; i < l; i++)
        if (tasks[i].script == "${globals.scriptName}") return api.utils.scheduler.RemoveTask({appid: appid, session:session, id: tasks[i].id});
      
  createScript:
    script: |
      let Response = com.hivext.api.Response;
      let Transport = com.hivext.api.core.utils.Transport;
      let StrSubstitutor = org.apache.commons.lang3.text.StrSubstitutor;
      let scriptBody = new Transport().get("${baseUrl}/scripts/promote-master.js");
      let ROOT = "root";
      let tableName = "promotePrimary";
      
      resp = api.data.base.GetType(tableName);
      if (resp.result == com.hivext.api.Response.TYPE_NOT_DEFINED) {
        resp = api.data.base.DefineType(appid, session, tableName, [{
          envName: "string",
          isRunning: "boolean",
          count: "int",
          "primary_idle_time": "int",
          "primary_idle_iterations": "int"
        }]);
        if (resp.result != 0) return resp;
        java.lang.Thread.sleep(1000);
      }

      scriptBody = new StrSubstitutor({token: "${globals.random}"}, "${", "}").replace(scriptBody);
      command = "sed -ri 's|PLATFORM_DOMAIN=.*|PLATFORM_DOMAIN=\"${platformUrl}\"|g' /usr/local/sbin/jcm.sh";
      resp = api.env.control.ExecCmdByGroup("${env.name}", session, "sqldb", toJSON([{ command: command }]), true, false, ROOT);
      if (resp.result != 0) return resp;
      
      resp = api.dev.scripting.GetScript(appid, session, "${globals.scriptName}");
      if (resp.result == Response.OK) {
      //delete the script if it already exists
        api.dev.scripting.DeleteScript(appid, session, "${globals.scriptName}");
      }

      resp = api.dev.scripting.CreateScript(appid, session, "${globals.scriptName}", "js", scriptBody)
      if (resp.result != 0) return resp;
      java.lang.Thread.sleep(1000);

      //build script to avoid caching
      resp = api.dev.scripting.Build(appid, session, "${globals.scriptName}");
      if (resp.result != 0) return resp;
      
      return api.utils.scheduler.CreateEnvTask({
        appid: appid,
        envName: "${env.name}",
        session: session,
        script: "${globals.scriptName}",
        trigger: "cron:0/10 * * ? * * *",
        description: "Promote new Primary", 
        params: {
          envName: "${env.name}",
          "primary_idle_time": "${settings.primary_idle_time}"
        }
      })
