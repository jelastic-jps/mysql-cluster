type: update
name: Auto Promote New Primary Add-On (Alpha)
id: promote-new-primary-with-proxysql

description:
  text:  "Enable automatic failover for your regular MySQL/MariaDB Primary-Secondary database cluster. After installation, the add-on tracks the cluster node's status to automatically replace failed nodes. It also promotes new Primary if the current one becomes unavailable."
  short: Auto-Failover for MySQL/MariaDB Primary-Secondary Topology

logo: images/db-failover-red.png

baseUrl: https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-cluster@master/addons/promote-new-primary

mixins:
  - https://cdn.jsdelivr.net/gh/jelastic-jps/mysql-cluster@3.0.0/scripts/common.yml
  - /scripts/common.yml

targetNodes:
  nodeGroup: 
    - proxy

settings:
  main:
    submitUnchanged: true
    fields:
      - name: primary_idle_time
        caption: Primary Idle Time (sec)
        type: spinner
        min: 30
        max: 3600

      - type: checkbox
        name: is_endpoint
        caption: Endpoint to Primary DB
        value: true

  configure:
    submitUnchanged: true
    fields:
      - name: primary_idle_time
        caption: Primary Idle Time (sec)
        type: spinner
        min: 30
        max: 3600

      - type: checkbox
        name: is_endpoint
        caption: Endpoint to Primary DB
        value: true

    onBeforeInit: |
      var envName = '${env.envName}';
      var settings = jps.settings.configure;
      var fields = {}, endpoints;
      for (var i = 0, field; field = jps.settings.configure.fields[i]; i++)
        fields[field.name] = field;
      fields["is_endpoint"].value = false;
      var envInfo = jelastic.env.control.GetEnvInfo(envName, session);
      if (envInfo.result != 0) return envInfo;
    
      var nodes = envInfo.nodes, node;
      for (var i = 0, n = nodes.length; i < n; i++) {
        node = nodes[i];
        if (node.nodeGroup == 'sqldb' && node.endpoints) {
          for (var k = 0, l = node.endpoints.length; k < l; k++) {
            if (node.endpoints[k].name == "PrimaryDB") fields["is_endpoint"].value = true;
          }
        }
      }
      return settings;

buttons:
  - name: Idle Time Failover
    caption: Auto Failover
    confirmText: Enable Auto Failover?
    settings: configure
    loadingText: Enabling Auto Failover...
    action: configure

  - name: Failover
    caption: Failover
    confirmText: Run failover?
    loadingText: Applying failover...
    action: forceFailover

onInstall:
  - addConfiguration
  - downloadScripts
  - createScript
  - addSchedulerToProxySQL
  - idleTimeConfigure
  - addDomainToPrimary:
      domain: primarydb
      nodeId: ${nodes.sqldb.master.id}
  - createScript
  - if (${settings.is_endpoint:true}):
    - addEndpoint:
        nodeId: ${nodes.sqldb.master.id}
    - getPublicPort
    - successDnsEndpoint
  - else: 
    - removeEndpoint
    - successDns

onCustomNodeEvent [name:executeScript]:
  script: |
    let URL = "${platformUrl}${globals.scriptName}?appid=" + appid + "&token=${globals.random}&envName=${env.name}&uid=${user.uid}&session=" + session;
    let Transport = com.hivext.api.core.utils.Transport;
    let resp = new Transport().get(URL);
    resp = JSON.parse(resp);
    if (resp.response && resp.response != 0) {
      return new Transport().get("${platformUrl}/1.0/environment/jerror/rest/jerror?appid=" + appid + "&actionname=promoteprimary&callparameters=" + URL + "&email=${user.email}&errorcode=4121&errormessage=" + encodeURIComponent(resp.response.message) + "&priority=high");
      return resp.response;
    }
    return { result: 0 }

actions:
  configure:
    - addSchedulerToProxySQL
    - idleTimeConfigure
    - if (${settings.is_endpoint:true}):
      - addEndpoint:
          nodeId: ${nodes.sqldb.master.id}
      - getPublicPort
      - successDnsEndpoint
    - else: 
      - removeEndpoint
      - successDns

  addConfiguration:
    - cmd[proxy]: |-
        [ ! -d /etc/proxysql ] && mkdir /etc/proxysql;
        [ ! -f /etc/proxysql/jcm.conf ] && echo "### ProxySQL configuration for JCM" > /etc/proxysql/jcm.conf;
        grep -q "PRIMARY_NODE_ID" /etc/proxysql/jcm.conf || { echo "PRIMARY_NODE_ID=node${nodes.sqldb.master.id}" >> /etc/proxysql/jcm.conf; }
        echo /etc/proxysql/jcm.conf >>  /etc/jelastic/redeploy.conf;
        chown jelastic /etc/proxysql/jcm.conf;
        chown jelastic -R /etc/proxysql;
      user: root

  addSchedulerToProxySQL:
    - cmd[proxy]: |-
        bash ${globals.jcmPath} addScheduler --interval=${settings.primary_idle_time} --filename=/usr/local/sbin/jcm.sh --arg1=primaryStatus --scheduler_name=primaryStatus;

  forceFailover:
    - cmd[${nodes.proxy.master.id}]: screen -d -m bash /usr/local/sbin/jcm.sh forceFailover

  downloadScripts:
    - cmd[proxy]: |-
        curl --silent ${baseUrl}/scripts/jcm.sh > ${globals.jcmPath};
        chmod +x ${globals.jcmPath};
        echo "Start JCM logs" > /var/log/jcm.log;
        chown jelastic /var/log/jcm.log;
      user: root

  idleTimeConfigure:
    - script: |
        var interval_1 = parseInt("${settings.primary_idle_time}"), interval_2 = parseInt("${settings.primary_idle_time}") + 20 ;
        return {result:0, onAfterReturn:{setGlobals:{interval_1:interval_1, interval_2:interval_2}}};
    - forEach(i:nodes.proxy):
      - if (${@i.ismaster}):
          cmd[${@i.id}]: bash ${globals.jcmPath} setSchedulerTimeout --interval=${globals.interval_1} --scheduler_name=primaryStatus;
      - else:
          cmd[${@i.id}]: bash ${globals.jcmPath} setSchedulerTimeout --interval=${globals.interval_2} --scheduler_name=primaryStatus;      
  
  createScript:
    script: |
      let Response = com.hivext.api.Response;
      let Transport = com.hivext.api.core.utils.Transport;
      let StrSubstitutor = org.apache.commons.lang3.text.StrSubstitutor;
      let scriptBody = new Transport().get("${baseUrl}/scripts/promote-master.js");
      let ROOT = "root";

      scriptBody = new StrSubstitutor({token: "${globals.random}"}, "${", "}").replace(scriptBody);

      let URL = "${platformUrl}${globals.scriptName}?appid=" + appid + "\\&token=${globals.random}\\&envName=${env.name}\\&uid=${user.uid}";
      command = "sed -ri 's|PLATFORM_DOMAIN=.*|PLATFORM_DOMAIN=\"${platformUrl}\"|g' /usr/local/sbin/jcm.sh";
      
      let resp = api.env.control.ExecCmdByGroup("${env.name}", session, "proxy", toJSON([{ command: command }]), true, false, ROOT);
      if (resp.result != 0) return resp;

      resp = api.dev.scripting.GetScript(appid, session, "${globals.scriptName}");
      if (resp.result == Response.OK) {
      //delete the script if it already exists
        api.dev.scripting.DeleteScript(appid, session, "${globals.scriptName}");
      }

      resp = api.dev.scripting.CreateScript(appid, session, "${globals.scriptName}", "js", scriptBody)
      if (resp.result != 0) return resp;
      java.lang.Thread.sleep(1000);

      //build script to avoid caching
      return api.dev.scripting.Build(appid, session, "${globals.scriptName}");
