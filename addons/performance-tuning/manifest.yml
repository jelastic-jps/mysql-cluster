type: update
name: DB Cluster Tuning
id: proxysql-db-tune-addon
logo: addons/performance-tuning/images/mysql-proxysql-tuning.png
description: Change ProxySQL and Database settings according to your particular use case

baseUrl: https://raw.githubusercontent.com/sych74/mysql-cluster/JE-66111/addons/performance-tuning

targetNodes: proxysql

globals:
  dbMaxConnections: 2048
  
settings:
  settingsTune:
    onBeforeInit: /scripts/variablesManager.js
    fields:
     - type: list
       caption: ProxySQL Variable
       name: varName
       default: mysql-monitor_connect_timeout
       tooltip:
         text: |
              The behaviour of ProxySQL can be tweaked using global variables. There are 2 types of global variables, depending on which part of ProxySQL they control:
              <ul>
                <li><b>&#x2022; admin</b> variables, which control the behaviour of the admin interface. Their names begin with the token "admin-"
                <li><b>&#x2022; mysql</b> variables, which control the MySQL functionality of the proxy. Their names begin with the token "mysql-"
              </ul>
              Read official documentation before changing Global Variables:<a href="https://proxysql.com/documentation/global-variables/"> https://proxysql.com/documentation/global-variables/</a>
         maxWidth: 700
         minWidth: 700
     - type: list
       caption: Variable Value
       name: varValue
       default: 1200
       editable: true
     - type: displayfield
     - type: compositefield
       caption: ProxySQL Threads
       items:
         - type: spinner
           name: threadsNumber
           value: 4
         - type: tooltip
           text: The number of background threads that ProxySQL uses in order to process MySQL traffic.
           hidden: false     
     - type: compositefield
       caption: ProxySQL Connections
       items:
         - type: spinner
           name: maxConnections
           value: 1000
           min: 1
         - type: tooltip
           text: ProxySQL maintains a pool of connections. A connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required.
           hidden: false
     
     - type: displayfield

buttons:
  - caption: Change Settings
    action: settingsUpdate
    settings: settingsTune


onInstall:
  - jcmLogPermission

actions:
  settingsUpdate:
    - variableUpdate
    - weightUpdate
  
  variableUpdate:
    - cmd[sqldb]: |-
        sed -i s/^max_connections.*/max_connections=${settings.dbMaxConnections}/g /etc/mysql/conf.d/my_custom.cnf
      user: root
    - cmd[sqldb]: jem service restart
    - cmd[proxysql]: mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "update global_variables set variable_value=${settings.varValue} where variable_name='${settings.varName}';LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;"
    - cmd[proxysql]: mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "UPDATE global_variables SET variable_value=${settings.threadsNumber} WHERE variable_name = 'mysql-threads'; LOAD MYSQL VARIABLES TO RUNTIME; SAVE MYSQL VARIABLES TO DISK;";
    - cmd[proxysql]: mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "UPDATE mysql_servers SET max_connections=${settings.maxConnections}; LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;"
  
  weightUpdate:
    script: |
      var envInfo, weight, cmd, execCmd, nodeId, settings = JSON.parse('${settings}');        
      envInfo = api.env.control.GetEnvInfo("${env.name}", session);
      if (envInfo.result != 0) return envInfo;
      for (let i = 0, n = envInfo.nodes.length; i < n; i++) {
        if (envInfo.nodes[i].nodeGroup == 'sqldb') {   
          nodeId = envInfo.nodes[i].id;
          weight = (settings[nodeId] / 100) * 10000000;
          cmd1 = "curl -fsSL 'https://raw.githubusercontent.com/sych74/mysql-cluster/JE-66111/addons/performance-tuning/scripts/jcm.sh' -o /tmp/jcm.sh";
          cmd2 = "bash /tmp/jcm.sh setWeight --weight=" + weight+ " --node=node" +nodeId;
          execCmd =  api.environment.control.ExecCmdByGroup({
            envName: '${env.envName}', 
            nodeGroup: 'proxy',
            commandList: toJSON([{"command": cmd1},{"command": cmd2}])
          });
          if (execCmd.result != 0) return execCmd;
        }
      }
      return {result : 0};
  
  jcmLogPermission:
    cmd[proxy]: |-
      echo "JCM add-on logs" > /var/log/migrator.log;
      chown jelastic /var/log/jcm.log;
    user: root
