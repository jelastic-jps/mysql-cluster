type: update
name: DB Cluster Tuning
id: proxysql-db-tune-addon
logo: addons/performance-tuning/images/mysql-proxysql-tuning.png
description: Change ProxySQL settings according to your particular use case

baseUrl: https://raw.githubusercontent.com/sych74/mysql-cluster/JE-66111/addons/performance-tuning

targetNodes: proxysql
  
settings:
  settingsTune:
    onBeforeInit: /scripts/variablesManager.js?_r=${fn.random}
    fields:
     - type: list
       caption: ProxySQL Variable
       name: varName
       default: mysql-monitor_connect_timeout
       tooltip:
         text: |
              The behaviour of ProxySQL can be tweaked using global variables. There are 2 types of global variables, depending on which part of ProxySQL they control:
              <ul>
                <li><b>&#x2022; admin</b> variables, which control the behaviour of the admin interface. Their names begin with the token "admin-"
                <li><b>&#x2022; mysql</b> variables, which control the MySQL functionality of the proxy. Their names begin with the token "mysql-"
              </ul>
              Read official documentation before changing Global Variables:<a href="https://proxysql.com/documentation/global-variables/"> https://proxysql.com/documentation/global-variables/</a>
         maxWidth: 700
         minWidth: 700
     - type: list
       caption: Variable Value
       name: varValue
       default: 1200
       editable: true
     - type: displayfield
     - type: compositefield
       caption: ProxySQL Threads
       items:
         - type: spinner
           name: threadsNumber
           value: 4
         - type: tooltip
           text: The number of background threads that ProxySQL uses in order to process MySQL traffic.
           hidden: false     
     - type: compositefield
       caption: ProxySQL Connections
       items:
         - type: spinner
           name: maxConnections
           value: 1000
           min: 1
         - type: tooltip
           text: ProxySQL maintains a pool of connections. A connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required.
           hidden: false
     
     - type: displayfield

buttons:
  - caption: Change Settings
    action: settingsUpdate
    settings: settingsTune

responses:
  98:
    type: warning
    message: |
      An error occurs while updating the ProxySQL settiings.  
      Please check the **/var/log/jcm.log** log file for details.
  99:
    type: warning
    message: Add-on does not provide performance tuning for a non-cluster topologies.

onInstall:
  - getClusterScheme
  - jcmLogPermission

actions:
  
  jcmLogPermission:
    cmd[proxy]: |-
      echo "JCM add-on logs" > /var/log/jcm.log;
      chown jelastic /var/log/jcm.log;
    user: root

  getClusterScheme:
    - script: |
        var nodeGroups, resp, scheme = "";
        resp = api.env.control.GetNodeGroups("${env.name}", session);
        if (resp.result != 0) return resp;
        nodeGroups = resp.object;
        for (var i = 0, n = nodeGroups.length; i < n; i++) {
          if (nodeGroups[i].name == 'sqldb' && nodeGroups[i].cluster && nodeGroups[i].cluster.enabled && nodeGroups[i].cluster.settings.scheme) {
            scheme = String(nodeGroups[i].cluster.settings.scheme);
          }
        }
        if (scheme !== "master" && scheme !== "slave" && scheme !== "galera") return 99;
        return {result: 0, onAfterReturn:{ setGlobals:{ "scheme": scheme }}}

  settingsUpdate:
    - variableUpdate
    - weightUpdate
    - getClusterScheme
    - if ('${globals.scheme}' == 'galera'):
        setGaleraMaxWriters
    - return:
        type: success
        message: ProxySQL settings were updated successfully.

  variableUpdate:
    cmd[proxysql]: |-
      mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "update global_variables set variable_value=${settings.varValue} where variable_name='${settings.varName}';LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;"
      mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "UPDATE global_variables SET variable_value=${settings.threadsNumber} WHERE variable_name = 'mysql-threads'; LOAD MYSQL VARIABLES TO RUNTIME; SAVE MYSQL VARIABLES TO DISK;";
      mysql -uadmin -padmin -h 127.0.0.1 -P6032 -e "UPDATE mysql_servers SET max_connections=${settings.maxConnections}; LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;"
  
  weightUpdate:
    script: |
      let envInfo, weight, cmd, execCmd, nodeId, settings = JSON.parse('${settings}');        
      let minWeight = 0; 
      let maxWeight = 10000000;
      
      function percentToWeight(percent){
        let localWeight=1;
        let parsedPercent = parseInt(percent);
        if (parsedPercent == 0) localWeight = 0;
        if (parsedPercent == 1) localWeight = 100000;
        if (parsedPercent > 1) localWeight = (parsedPercent / 100) * maxWeight;
        return {
          result: 0,
          weight: localWeight
        }
      };
      
      envInfo = api.env.control.GetEnvInfo("${env.name}", session);
      if (envInfo.result != 0) return envInfo;
      for (let i = 0, n = envInfo.nodes.length; i < n; i++) {
        if (envInfo.nodes[i].nodeGroup == 'sqldb') {   
          nodeId = envInfo.nodes[i].id;
          weight = percentToWeight(settings[nodeId]).weight;
          cmd1 = "curl -fsSL 'https://raw.githubusercontent.com/sych74/mysql-cluster/JE-66111/addons/performance-tuning/scripts/jcm.sh' -o /tmp/jcm.sh";
          cmd2 = "bash /tmp/jcm.sh setWeight --weight=" + weight+ " --node=node" +nodeId;
          execCmd =  api.environment.control.ExecCmdByGroup({
            envName: '${env.envName}', 
            nodeGroup: 'proxy',
            commandList: toJSON([{"command": cmd1},{"command": cmd2}])
          });
          if (execCmd.result != 0) return execCmd;
        }
      }
      return {result : 0};

  setGaleraMaxWriters:
    script: |
      var cmd1 = "curl -fsSL 'https://raw.githubusercontent.com/sych74/mysql-cluster/JE-66111/addons/performance-tuning/scripts/jcm.sh' -o /tmp/jcm.sh";
      var cmd2 = "bash /tmp/jcm.sh setGaleraMaxWriters --count=" + '${settings.maxWriters}';
      return api.environment.control.ExecCmdByGroup({
        envName: '${env.envName}', 
        nodeGroup: 'proxy',
        commandList: toJSON([{"command": cmd1},{"command": cmd2}])
      });
